.data


.text
# jump to main function
jal main
j end
f_fib:
bb0:

# %v0 = alloca i32
addi $k0 $sp -8
sw $k0 -12($sp)

# store i32 %a0, i32* %v0
lw $k1 -12($sp)
lw $k0 -4($sp)
sw $k0 0($k1)

# %v1 = load i32, i32* %v0
lw $k0 -12($sp)
lw $k0 0($k0)
sw $k0 -16($sp)

# %v2 = icmp eq i32 %v1, 1
lw $k0 -16($sp)
li $k1 1
seq $k0 $k0 $k1
sw $k0 -20($sp)

# br i1 %v2, label %bb1, label %bb2
lw $k0 -20($sp)
bne $k0 $zero bb1
beq $k0 $zero bb2
bb1:

# ret i32 1
li $v0 1
jr $ra

# br label %bb2
j bb2
bb2:

# %v3 = load i32, i32* %v0
lw $k0 -12($sp)
lw $k0 0($k0)
sw $k0 -24($sp)

# %v4 = icmp eq i32 %v3, 2
lw $k0 -24($sp)
li $k1 2
seq $k0 $k0 $k1
sw $k0 -28($sp)

# br i1 %v4, label %bb3, label %bb4
lw $k0 -28($sp)
bne $k0 $zero bb3
beq $k0 $zero bb4
bb3:

# ret i32 2
li $v0 2
jr $ra

# br label %bb4
j bb4
bb4:

# %v6 = load i32, i32* %v0
lw $k0 -12($sp)
lw $k0 0($k0)
sw $k0 -32($sp)

# %v7 = sub i32 %v6, 1
lw $k0 -32($sp)
li $k1 1
subu $k0 $k0 $k1
sw $k0 -36($sp)

# %v5 = call i32 @f_fib(i32 %v7)
sw $sp -40($sp)
sw $ra -44($sp)
lw $k0 -36($sp)
sw $k0 -48($sp)
addi $sp $sp -44
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -40($sp)

# %v9 = load i32, i32* %v0
lw $k0 -12($sp)
lw $k0 0($k0)
sw $k0 -44($sp)

# %v10 = sub i32 %v9, 2
lw $k0 -44($sp)
li $k1 2
subu $k0 $k0 $k1
sw $k0 -48($sp)

# %v8 = call i32 @f_fib(i32 %v10)
sw $sp -52($sp)
sw $ra -56($sp)
lw $k0 -48($sp)
sw $k0 -60($sp)
addi $sp $sp -56
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -52($sp)

# %v11 = add i32 %v5, %v8
lw $k0 -40($sp)
lw $k1 -52($sp)
addu $k0 $k0 $k1
sw $k0 -56($sp)

# ret i32 %v11
lw $v0 -56($sp)
jr $ra
main:
bb5:

# %v0 = alloca i32
addi $k0 $sp -4
sw $k0 -8($sp)

# store i32 2, i32* %v0
lw $k1 -8($sp)
li $k0 2
sw $k0 0($k1)

# %v1 = alloca i32
addi $k0 $sp -12
sw $k0 -16($sp)

# store i32 5, i32* %v1
lw $k1 -16($sp)
li $k0 5
sw $k0 0($k1)

# %v2 = call i32 @getint()
li $v0 5
syscall
sw $v0 -20($sp)

# store i32 %v2, i32* %v0
lw $k1 -8($sp)
lw $k0 -20($sp)
sw $k0 0($k1)

# %v3 = call i32 @getint()
li $v0 5
syscall
sw $v0 -24($sp)

# store i32 %v3, i32* %v1
lw $k1 -16($sp)
lw $k0 -24($sp)
sw $k0 0($k1)

# %v4 = alloca [2 x i32]
addi $k0 $sp -32
sw $k0 -36($sp)

# store [2 x i32] [i32 1, i32 2], [2 x i32]* %v4
lw $k1 -36($sp)
li $k0 1
sw $k0 0($k1)
li $k0 2
sw $k0 4($k1)

# %v5 = load i32, i32* %v0
lw $k0 -8($sp)
lw $k0 0($k0)
sw $k0 -40($sp)

# %v7 = load i32, i32* %v1
lw $k0 -16($sp)
lw $k0 0($k0)
sw $k0 -44($sp)

# %v6 = mul i32 %v5, %v7
lw $k0 -40($sp)
lw $k1 -44($sp)
mult $k0 $k1
mflo $k0
sw $k0 -48($sp)

# %v8 = sub i32 0, %v6
li $k0 0
lw $k1 -48($sp)
subu $k0 $k0 $k1
sw $k0 -52($sp)

# %v10 = call i32 @f_fib(i32 4)
sw $sp -56($sp)
sw $ra -60($sp)
li $k0 4
sw $k0 -64($sp)
addi $sp $sp -60
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -56($sp)

# %v9 = mul i32 %v8, %v10
lw $k0 -52($sp)
lw $k1 -56($sp)
mult $k0 $k1
mflo $k0
sw $k0 -60($sp)

# %v11 = add i32 %v9, 0
lw $k0 -60($sp)
sw $k0 -64($sp)

# %v12 = call i32 @f_fib(i32 1)
sw $sp -68($sp)
sw $ra -72($sp)
li $k0 1
sw $k0 -76($sp)
addi $sp $sp -72
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -68($sp)

# %v13 = add i32 0, %v12
li $k0 0
lw $k1 -68($sp)
addu $k0 $k0 $k1
sw $k0 -72($sp)

# %v14 = getelementptr [2 x i32], [2 x i32]* %v4, i32 0, i32 %v13
lw $k0 -36($sp)
lw $k1 -72($sp)
sll $k1 $k1 2
addu $k0 $k1 $k0
sw $k0 -76($sp)

# %v15 = load i32, i32* %v14
lw $k0 -76($sp)
lw $k0 0($k0)
sw $k0 -80($sp)

# %v16 = mul i32 %v15, 1
lw $k0 -80($sp)
sw $k0 -84($sp)

# %v17 = add i32 %v11, %v16
lw $k0 -64($sp)
lw $k1 -84($sp)
addu $k0 $k0 $k1
sw $k0 -88($sp)

# %v18 = sdiv i32 1, 2
li $k0 1
li $k1 2
div $k0 $k1
mflo $k0
sw $k0 -92($sp)

# %v19 = sub i32 %v17, %v18
lw $k0 -88($sp)
lw $k1 -92($sp)
subu $k0 $k0 $k1
sw $k0 -96($sp)

# %v20 = mul i32 %v19, 5
lw $k0 -96($sp)
addu $t2 $k0 $k0
addu $t2 $t2 $k0
addu $t2 $t2 $k0
addu $k0 $t2 $k0
sw $k0 -100($sp)

# store i32 %v20, i32* %v0
lw $k1 -8($sp)
lw $k0 -100($sp)
sw $k0 0($k1)

# %v22 = mul i32 7, 5923
li $k0 7
li $k1 5923
mult $k0 $k1
mflo $k0
sw $k0 -104($sp)

# %v23 = sdiv i32 %v22, 56
lw $k0 -104($sp)
li $k1 56
div $k0 $k1
mflo $k0
sw $k0 -108($sp)

# %v24 = mul i32 %v23, 56
lw $k0 -108($sp)
li $k1 56
mult $k0 $k1
mflo $k0
sw $k0 -112($sp)

# %v26 = call i32 @f_fib(i32 6)
sw $sp -116($sp)
sw $ra -120($sp)
li $k0 6
sw $k0 -124($sp)
addi $sp $sp -120
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -116($sp)

# %v25 = call i32 @f_fib(i32 %v26)
sw $sp -120($sp)
sw $ra -124($sp)
lw $k0 -116($sp)
sw $k0 -128($sp)
addi $sp $sp -124
jal f_fib
lw $ra 0($sp)
lw $sp 4($sp)
sw $v0 -120($sp)

# %v27 = sub i32 %v24, %v25
lw $k0 -112($sp)
lw $k1 -120($sp)
subu $k0 $k0 $k1
sw $k0 -124($sp)

# %v28 = add i32 1, 2
li $k0 1
li $k1 2
addu $k0 $k0 $k1
sw $k0 -128($sp)

# %v29 = sdiv i32 89, 2
li $k0 89
li $k1 2
div $k0 $k1
mflo $k0
sw $k0 -132($sp)

# %v30 = mul i32 %v29, 36
lw $k0 -132($sp)
li $k1 36
mult $k0 $k1
mflo $k0
sw $k0 -136($sp)

# %v31 = sub i32 %v30, 53
lw $k0 -136($sp)
li $k1 53
subu $k0 $k0 $k1
sw $k0 -140($sp)

# %v32 = sdiv i32 %v31, 1
lw $k0 -140($sp)
li $k1 1
div $k0 $k1
mflo $k0
sw $k0 -144($sp)

# %v33 = mul i32 %v32, 6
lw $k0 -144($sp)
li $k1 6
mult $k0 $k1
mflo $k0
sw $k0 -148($sp)

# %v34 = sub i32 %v28, %v33
lw $k0 -128($sp)
lw $k1 -148($sp)
subu $k0 $k0 $k1
sw $k0 -152($sp)

# %v36 = mul i32 45, 56
li $k0 45
li $k1 56
mult $k0 $k1
mflo $k0
sw $k0 -156($sp)

# %v37 = sdiv i32 %v36, 85
lw $k0 -156($sp)
li $k1 85
div $k0 $k1
mflo $k0
sw $k0 -160($sp)

# %v38 = sub i32 %v37, 56
lw $k0 -160($sp)
li $k1 56
subu $k0 $k0 $k1
sw $k0 -164($sp)

# %v39 = mul i32 35, 56
li $k0 35
li $k1 56
mult $k0 $k1
mflo $k0
sw $k0 -168($sp)

# %v40 = sdiv i32 %v39, 4
lw $k0 -168($sp)
li $k1 4
div $k0 $k1
mflo $k0
sw $k0 -172($sp)

# %v41 = add i32 %v38, %v40
lw $k0 -164($sp)
lw $k1 -172($sp)
addu $k0 $k0 $k1
sw $k0 -176($sp)

# %v42 = sub i32 %v41, 9
lw $k0 -176($sp)
li $k1 9
subu $k0 $k0 $k1
sw $k0 -180($sp)

# %v35 = mul i32 2, %v42
li $k0 2
lw $k1 -180($sp)
mult $k0 $k1
mflo $k0
sw $k0 -184($sp)

# %v43 = sub i32 %v34, %v35
lw $k0 -152($sp)
lw $k1 -184($sp)
subu $k0 $k0 $k1
sw $k0 -188($sp)

# %v44 = add i32 %v27, %v43
lw $k0 -124($sp)
lw $k1 -188($sp)
addu $k0 $k0 $k1
sw $k0 -192($sp)

# store i32 %v44, i32* %v1
lw $k1 -16($sp)
lw $k0 -192($sp)
sw $k0 0($k1)

# %v47 = sub i32 0, 5
li $k0 0
li $k1 5
subu $k0 $k0 $k1
sw $k0 -196($sp)

# %v46 = alloca i32
addi $k0 $sp -200
sw $k0 -204($sp)

# store i32 %v47, i32* %v46
lw $k1 -204($sp)
lw $k0 -196($sp)
sw $k0 0($k1)

# %v48 = load i32, i32* %v0
lw $k0 -8($sp)
lw $k0 0($k0)
sw $k0 -208($sp)

# %v49 = load i32, i32* %v1
lw $k0 -16($sp)
lw $k0 0($k0)
sw $k0 -212($sp)

# %v50 = load i32, i32* %v46
lw $k0 -204($sp)
lw $k0 0($k0)
sw $k0 -216($sp)

# call void @putint(i32 %v48)
lw $a0 -208($sp)
li $v0 1
syscall

# call void @putch(i32 44)
li $a0 44
li $v0 11
syscall

# call void @putch(i32 32)
li $a0 32
li $v0 11
syscall

# call void @putint(i32 %v49)
lw $a0 -212($sp)
li $v0 1
syscall

# call void @putch(i32 44)
li $a0 44
li $v0 11
syscall

# call void @putch(i32 32)
li $a0 32
li $v0 11
syscall

# call void @putint(i32 %v50)
lw $a0 -216($sp)
li $v0 1
syscall

# call void @putch(i32 10)
li $a0 10
li $v0 11
syscall

# ret i32 0
li $v0 0
jr $ra
end:
li $v0 10
syscall

